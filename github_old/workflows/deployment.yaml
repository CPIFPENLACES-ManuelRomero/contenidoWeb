##name: Build and Deploy
##on:
##  push:
##    branches:
##      - main
##jobs:
##  build:
##    strategy:
##      matrix:
##        version: [0.56.3, 0.57.2]
##        image: [ busybox, alpine ]
##    name: Build and Deploy
##    runs-on: ubuntu-latest
##    steps:
##      - name: Checkout code
##        uses: actions/checkout@v2
##      - name: 2_hugo
##        uses: klakegg/actions-2_hugo_@1.0.0
##        with:
##          version: ${{ matrix.version }}
##          image: ${{ matrix.image }}
##      - name: Install SSH Key
##        uses: shimataro/ssh-key-action@v2
##        with:
##          key: ${{ secrets.SSH_KEY }}
##          known_hosts: manuel.infenlaces.com #'just-a-placeholder-so-we-dont-get-errors'
##      - name: Adding Known Hosts
##        run: ssh-keyscan -H ${{ secrets.IP_SERVER }} >> ~/.ssh/known_hosts
##
##
##      - name: Copy to webserver
##        run: rsync --delete -rvzh ./public ${{ secrets.USER_NAME }}@${{ secrets.IP_SERVER }}:/home/manuel/web/manuel.infenlaces.com/public_html/dwes
##
## Sample workflow for building and deploying a Hugo site to GitHub Pages
#name: Deploy Hugo site to Pages
#
on:
#  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
#  # Allows you to run this workflow manually from the Actions tab
#  workflow_dispatch:
## Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
#permissions:
#  contents: read
#  pages: write
#  id-token: write
#
## Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
## However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
#concurrency:
#  group: "pages"
#  cancel-in-progress: false
#
## Default to bash
#defaults:
#  run:
#    shell: bash
jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
#    env:
#      HUGO_VERSION: 0.115.0
    steps:
      - name: Use variables
        run: |
            echo " accion $GITHUB_ACTION"
            echo " accion"  ${{ vars.GITHUB_ACTION}}
            echo "usuario " ${{ env.USER }}
            echo "host " ${{ env.HOST }}

#      - name: Install Hugo CLI
#        run: |
#          wget -O ${{ runner.temp }}/2_hugo_.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
#          && sudo dpkg -i ${{ runner.temp }}/2_hugo_.deb
#      - name: Install Dart Sass Embedded
#        run: sudo snap install dart-sass-embedded
#      - name: Checkout
#        uses: actions/checkout@v3
##        with:
##          submodules: recursive
#      - name: Setup Pages
#        id: pages
#        uses: actions/configure-pages@v3
#      - name: Install Node.js dependencies
#        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
#      - name: Build with Hugo
#        env:
#          # For maximum backward compatibility with Hugo modules
#          HUGO_ENVIRONMENT: production
#          HUGO_ENV: production
#        run: |
#          2_hugo_ \
#            --minify \
#            --baseURL "${{ steps.pages.outputs.base_url }}/"
#      - name: Upload artifact
#        uses: actions/upload-pages-artifact@v1
#        with:
#          path: ./public
##      - name: Creando known_host
##        run: ssh -T git@github.com
##      - name: Adding Known Hosts
##        run: cat ${{ secrets.SSH_PUBLIC }} > ~/.ssh/known_hosts
#      - name: Use variables
#        run: |
#            echo "usuario : $USER"
#            echo "host : $HOST"
#      - name: Adding Known Hosts
#        run: mkdir -p ~/.ssh
#      - name: Copy ssh 1
#        run: echo "$SSH_PUBLIC" > ~/.ssh/id_rsa.pub
#      - name: Copy ssh 1
#        run: echo "$SSH_KEY" > ~/.ssh/id_rsa
#      - name: Copy ssh 3
#        run:  chmod 600 ~/.ssh/id_rsa
#      - name: deploy
#        run:  rsync --delete -rvzh ./public ${{ vars.USER }}@${{ vars.HOST }}:/home/manuel/web/manuel.infenlaces.com/public_html/dwes
